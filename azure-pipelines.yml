trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  # Variables personnalisables
  buildConfiguration: 'Release'  # Configuration de build (Debug, Release, etc.)
  projectName: 'MonProjetNode'  # Nom de votre projet
  outputDirectory: 'dist'  # Répertoire de sortie de la build
  azureSubscription: 'VotreAbonnementAzure'  # Nom de votre abonnement Azure
  appService: 'MonAppService'  # Nom de votre App Service

steps:
- script: |
    npm install -g npm
    npm install -g whatsapp-web.js
  displayName: 'Installer les dépendances système et WhatsApp Web'

- task: NodeTool@0
  inputs:
    versionSpec: '16.x'  # Spécifiez la version Node.js souhaitée
  displayName: 'Installer Node.js'

- script: |
    mkdir wwebjs-bot
    cd wwebjs-bot
    npm init -y
    npm start
  displayName: 'Créer un nouveau projet et exécuter le script de démarrage'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(outputDirectory)'
    ArtifactName: 'drop'
  displayName: 'Publier les artefacts'

# Tâches optionnelles :
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '**/*.js'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/coverage'
    Overwrite: true
  displayName: 'Copier les fichiers de couverture de code'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/coverage/*.xml'
    testRunTitle: 'Tests unitaires'
  displayName: 'Publier les résultats des tests'

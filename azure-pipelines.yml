trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  # Variables personnalisables
  buildConfiguration: 'Release'  # Configuration de build (Debug, Release, etc.)
  projectName: 'MonProjetNode'  # Nom de votre projet
  outputDirectory: 'dist'  # Répertoire de sortie de la build
  azureSubscription: 'VotreAbonnementAzure'  # Nom de votre abonnement Azure
  appService: 'MonAppService'  # Nom de votre App Service

steps:
- script: |
    sudo apt install -y gconf-service libgbm-dev libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    mkdir wwebjs-bot
    cd wwebjs-bot
    npm init -y
    npm install whatsapp-web.js
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'  # Spécifiez la version Node.js souhaitée
  displayName: 'Installer Node.js'

- task: npm@1
  inputs:
    command: custom
    script: cd wwebjs-bot
    customCommand: 'start'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Installer les dépendances et exécuter la build'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(outputDirectory)'
    ArtifactName: 'drop'
  displayName: 'Publier les artefacts'



# Tâches optionnelles :
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '**/*.js'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/coverage'
    Overwrite: true
  displayName: 'Copier les fichiers de couverture de code'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/coverage/*.xml'
    testRunTitle: 'Tests unitaires'
  displayName: 'Publier les résultats des tests'
